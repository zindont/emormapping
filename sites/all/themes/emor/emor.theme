<?php

/**
 * @file
 * Functions to support theming in the Bartik theme.
 */

use Drupal\Core\Template\Attribute;
use Drupal\views\Views;
use Drupal\node\Entity\Node;

function emor_preprocess_views_view(&$variables){
  $GLOBALS['emor']['views']['id'] = $variables['id'];
}
/**
 * Implements template_preprocess_page().
 */
function emor_preprocess_page(&$variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $variables['theme_path'] = base_path().drupal_get_path('theme', $theme);
}

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function emor_preprocess_html(&$variables) {  
  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-two-sidebars';
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-first';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-second';
  }
  else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }

  if (!empty($variables['page']['featured_top'])) {
    $variables['attributes']['class'][] = 'has-featured-top';
  }

}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function emor_preprocess_page_title(&$variables) {
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render
    // elements.
    $variables['title_prefix']['shortcut_wrapper'] = array(
      '#markup' => '<div class="shortcut-wrapper clearfix">',
      '#weight' => 100,
    );
    $variables['title_suffix']['shortcut_wrapper'] = array(
      '#markup' => '</div>',
      '#weight' => -99,
    );
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }
}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function emor_preprocess_maintenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }

  // Bartik has custom styling for the maintenance page.
  $variables['#attached']['library'][] = 'bartik/maintenance_page';
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function emor_preprocess_node(&$variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $variables['theme_path'] = base_path().drupal_get_path('theme', $theme);
  // Remove the "Add new comment" link on teasers or when the comment form is
  // displayed on the page.
  if ($variables['teaser'] || !empty($variables['content']['comments']['comment_form'])) {
    unset($variables['content']['links']['comment']['#links']['comment-add']);
  }

  //Prepare content for Article 
  $node = $variables['node'];
  $emor_type_list = array(
    'emor_mapping_article',
    'emor_mapping_audio',
    'emor_mapping_video');
  $type = $node->type->target_id;
  if(in_array($type, $emor_type_list)){
    // var_dump($node->field_index_categories->value);
  }
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function emor_preprocess_block(&$variables) {
  //Prepare for TOP NAVBAR
  if ($variables['attributes']['id'] === 'block-topnavbar'){
    //LOGO
    $theme = \Drupal::theme()->getActiveTheme()->getName();
    $variables['theme_path'] = base_path().drupal_get_path('theme', $theme);      
    //SOCIAL ICON
    $variables['socials_menu'] = \Drupal::entityManager()->getStorage('taxonomy_term')->loadTree('socials');
  }

  //Prepare Welcome text
  if ($variables['attributes']['id'] === 'block-headerwelcometext'){
    if ( isset($GLOBALS['emor']['views']['id']) && $GLOBALS['emor']['views']['id'] == 'emor_mapping_explore'){
      $tmp = \Drupal::service('entity.manager')->getStorage('view')->load('emor_mapping_explore');
      $tmp = $tmp->getDisplay('default');
      $variables['header_text'] = $tmp['display_options']['header']['area']['content']['value'];
    }
    $node = \Drupal::routeMatch()->getParameter('node');
    
    //Get header welcome text for node (Emor mapping article/audio/video)
    if ($node) {
      $emor_type_list = array(
        'emor_mapping_article',
        'emor_mapping_audio',
        'emor_mapping_video');
      $type = $node->type->target_id;
      if(in_array($type, $emor_type_list)){
        $block = \Drupal::entityManager()->getStorage('block_content')->load(8);
        $variables['header_text'] = $block->body->value;
      }
    }
  }

  //Prepare for Index Tree
  if ($variables['attributes']['id'] === 'block-indextree'){
    $variables['index_tree'] = \Drupal::entityManager()->getStorage('taxonomy_term')->loadTree('index_categories');

    foreach ($variables['index_tree'] as $key => $value) {
      $temp = \Drupal\taxonomy\Entity\Term::load($value->tid);
      $variables['index_tree'][$key]->color = $temp->get('field_category_color')->color;
    }
    // $variables['index_tree'] = \Drupal\taxonomy\Entity\Vocabulary::load('index_categories');
  }

  // Add a clearfix class to system branding blocks.
  if ($variables['plugin_id'] == 'system_branding_block') {
    $variables['attributes']['class'][] = 'clearfix';
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function emor_preprocess_menu(&$variables, $hook) {
  

  $variables['attributes']['class'][] = 'clearfix';
  
  //Top-navbar menu
  if ($hook == 'menu__top_navbar') {
    // Get the current path.
    $current_path = \Drupal::request()->getRequestUri();
    $items = $variables['items'];
    foreach ($items as $key => $item) {
      // If path is current_path, set active to li.
      if ($item['url']->toString() == $current_path) {
        // Add active link.
        $variables['items'][$key]['attributes']['class'] = 'active';
      }
    }
  }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function emor_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }

  if ($variables['element']['#form_id'] == 'views_exposed_form') {
    if ( isset($GLOBALS['emor']['views']['id']) && $GLOBALS['emor']['views']['id'] == 'emor_mapping_explore'){
      $suggestions[] = 'form__emor_mapping_explore_filter';
    }
  }  
  
}

/**
 * Implements hook_form_alter() to add classes to the search form.
 */
function emor_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['search_block_form', 'search_form'])) {
    $key = ($form_id == 'search_block_form') ? 'actions' : 'basic';
    if (!isset($form[$key]['submit']['#attributes'])) {
      $form[$key]['submit']['#attributes'] = new Attribute();
    }
    $form[$key]['submit']['#attributes']->addClass('search-form__submit');
  }
}

function emor_preprocess_form(&$variables) {
  $element = $variables['element'];
  $variables['sort_by'] = $element['sort_by']['#options'];
  $variables['filter_by'] = $element['#info'];
  // echo '<pre>';
  // var_dump($variables['filter_by']);
  // echo '</pre>';

  // if (isset($element['#action'])) {
  //   $element['#attributes']['action'] = UrlHelper::stripDangerousProtocols($element['#action']);
  // }
  // Element::setAttributes($element, array('method', 'id'));
  // if (empty($element['#attributes']['accept-charset'])) {
  //   $element['#attributes']['accept-charset'] = "UTF-8";
  // }
  // $variables['attributes'] = $element['#attributes'];
  // $variables['children'] = $element['#children'];
}