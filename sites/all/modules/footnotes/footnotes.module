<?php

/**
 * @file
 * The Footnotes module is a filter that can be used to insert
 * automatically numbered footnotes into Drupal texts.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function footnotes_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.footnotes':
      return
        t('Insert automatically numbered footnotes using &lt;fn&gt; or [fn] tags. Enable the footnotes text filter @here',
          array('@here' => Drupal::l(t('here'), Url::fromRoute('filter.admin_overview')))
        );
  }
}

 
/**
 * Implementation of hook_theme()
 *
 * Thanks to emfabric for this implementation. http://drupal.org/node/221156
 */
function footnotes_theme() {
  return array(
    'footnote_link' => array(     
      'render element' => 'fn',
      'function' => 'theme_footnote_link',
    ),
    'footnote_list' => array(
      'variables' => array(
        'test' => '123',
      ),      
      'render element' => 'footnotes',
      'function' => 'theme_footnote_list',
    )
  );
}

/**
 * Themed output of a footnote link appearing in the text body.
 *
 * Accepts a single associative array, containing values on the following keys:
 *   text       - the raw unprocessed text extracted from within the [fn] tag
 *   text_clean - a sanitized version of the previous, may be used as HTML
 *                attribute value
 *   value      - the raw unprocessed footnote number or other identifying label
 *   fn_id      - the globally unique identifier for the in-body footnote link
 *                anchor, used to allow links from the list to the body.
 *   ref_id     - the globally unique identifier for the footnote's anchor in
 *                the footnote listing, used to allow links to the list from the
 *                body.
 */
function theme_footnote_link($fn) {
  // Drupal 8 needs the use of render arrays, the array como as this ugly,
  // maybe latter fix this, but for now it works.
  // @todo: change this ugly array for arguments in the function.
  $fn = $fn['fn']['fn'];
  return '<a class="see-footnote" id="' . $fn['ref_id'] . 
         '" title="' . $fn['text_clean'] . '" href="#' . $fn['fn_id'] . '">' .
         $fn['value'] . '</a>';
}

/**
 * Themed output of the footnotes list appearing at at [footnotes]
 *
 * Accepts an array containing an ordered listing of associative arrays, each 
 * containing values on the following keys:
 *   text   - the raw unprocessed text extracted from within the [fn] tag
 *   text_clean   - a sanitized version of the previous, may be used as HTML attribute value
 *   value  - the raw unprocessed footnote number or other identifying label
 *   fn_id  - the globally unique identifier for the in-body footnote link
 *            anchor, used to allow links from the list to the body
 *   ref_id - the globally unique identifier for the footnote's anchor in the
 *            footnote listing, used to allow links to the list from the body
 */
function theme_footnote_list($footnotes) {
  // var_dump($variables['test']);
  // Drupal 8 needs the use of render arrays, the array como as this ugly,
  // maybe latter fix this, but for now it works.
  // @todo: change this ugly array for arguments in the function.
  $footnotes = $footnotes['footnotes']['#footnotes'];
  $str = '<ul class="footnotes">';
  // Drupal 7 requires we use "render element" which just introduces a wrapper
  // around the old array.
  //$footnotes = $footnotes['footnotes'];
  // loop through the footnotes
  foreach ($footnotes as $fn) {
    if(!is_array( $fn['ref_id'])) {
      // Output normal footnote
      $str .= '<li class="footnote" id="' . $fn['fn_id'] .'"><a class="footnote-label" href="#' . $fn['ref_id'] . '">' . $fn['value'] . '.</a> ';
      $str .= $fn['text'] . "</li>\n";
    }
    else {
      // Output footnote that has more than one reference to it in the body.
      // The only difference is to insert backlinks to all references.
      // Helper: we need to enumerate a, b, c...
      $abc = str_split("abcdefghijklmnopqrstuvwxyz"); $i = 0;

      $str .= '<li class="footnote" id="' . $fn['fn_id'] .'"><a href="#' . $fn['ref_id'][0] . '" class="footnote-label">' . $fn['value'] . '.</a> ';
      foreach ($fn['ref_id'] as $ref) {
        $str .= '<a class="footnote-multi" href="#' . $ref . '">' . $abc[$i] . '.</a> ';
        $i++;
      }
      $str .= $fn['text'] . "</li>\n";   
    }
  }
  $str .= "</ul>\n";
  return $str;
}


/**
* Helper for other filters, check if Footnotes is present in your filter chain.
*
* Note: Due to changes in Filter API, the arguments to this function have changed
* in Drupal 7.
* 
* Other filters may leverage the Footnotes functionality in a simple way:
* by outputting markup with <fn>...</fn> tags within. 
*
* This creates a dependency, the Footnotes filter must be present later in 
* "Input format". By calling this helper function the other filters that 
* depend on Footnotes may check whether Footnotes is present later in the chain
* of filters in the current Input format.
*
* If this function returns true, the caller may depend on Footnotes. Function returns
* false if caller may not depend on Footnotes.
* 
* You should also put "dependencies = footnotes" in your module.info file.
*
* Example usage:
* <code>
* _filter_example_process( $text, $filter, $format ) {
*   ...
*   if(footnotes_is_footnotes_later($format, $filter)) {
*     //output markup which may include [fn] tags
*   }
*   else {
*     // must make do without footnotes features
*     // can also emit warning/error that user should install and configure footnotes module
*   }
*   ...
* }
* </code>
*
* @param $format
*    The text format object caller is part of.
* @param $caller_filter
*    The filter object representing the caller (in this text format).
*
* @return True if Footnotes is present after $caller in $format.
*/
function footnotes_is_footnotes_later( $format, $caller_filter) {
    return $format['filter_footnotes']['weight'] > $caller_filter['weight'];
}

function footnotes_preprocess_node(&$variables){
  $node = $variables['node'];

  //Prepare content for Article
  $type = $node->type->target_id;
  if($type == 'emor_mapping_article' and node_is_page($node) == true){
    $newContentTOC = getTableOfContent($node->body->value);
    $newContentNotes = getEmorNotes($newContentTOC['body']);

    $newContent['body'] = $newContentNotes['body'];
    $newContent['dataTableOfContent'] = $newContentTOC['dataTableOfContent'];
    $newContent['dataEmorNotes'] = $newContentNotes['dataEmorNotes'];
    $variables['newContent'] = $newContent;
  }
   
   
}

function getEmorNotes($contentHTML){
  $emorNotes = array();
  $dom = new DOMDocument();
  @$dom->loadHTML(mb_convert_encoding($contentHTML, 'HTML-ENTITIES', 'UTF-8'));
  $notes = $dom->getElementsByTagName('fn');

  foreach ($notes as $key => $item) {
    $data['note_label'] = $item->getAttribute('data-label'); 
    $data['note_content'] = $item->nodeValue;
    $data['id'] = preg_replace('/[^A-Za-z0-9\-]/', '-', strtolower( ($key + 1 ).'-'.$data['note_label'] ));
    $emorNotes[] = $data;
    $item->nodeValue = '';
    //Add number
    $sup = $dom->createElement('sup', '['.($key + 1).']');
    $link = $dom->createElement('a');
    $link->setAttribute('href','#emor-notes-'.$data['id']); 
    $link->appendChild($sup);
    $item->appendChild($link);
  }
  
  $result['body'] = preg_replace('/^<!DOCTYPE.+?>/', '', str_replace( array('<html>', '</html>', '<body>', '</body>'), array('', '', '', ''), $dom->saveHTML()));
  $result['dataEmorNotes'] = $emorNotes;

  return $result;
  
}

function getTableOfContent($contentHTML){
  $head = array();
  $dom = new DOMDocument();
  @$dom->loadHTML(mb_convert_encoding($contentHTML, 'HTML-ENTITIES', 'UTF-8')); 
  $hTwo = $dom->getElementsByTagName('h2');
  foreach ($hTwo as $key => $item) {
    $data['head_content'] = $item->nodeValue;
    $data['id'] = preg_replace('/[^A-Za-z0-9\-]/', '-', strtolower($item->nodeValue));
    $head[] = $data;
    //Set ID
    $hTwo[$key]->setAttribute('id', $data['id']);       
  }

  $result['body'] = preg_replace('/^<!DOCTYPE.+?>/', '', str_replace( array('<html>', '</html>', '<body>', '</body>'), array('', '', '', ''), $dom->saveHTML()));
  $result['dataTableOfContent'] = $head;

  return $result;
}